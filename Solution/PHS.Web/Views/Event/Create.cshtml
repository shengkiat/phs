@model PHS.DB.PHSEvent

@{
    ViewBag.Title = "Create";
}

<script language="javascript" type="text/javascript">
    function addRow() {

        var index = $("#tbBooks").children("tr").length;

        var indexCell = "<td style='display:none'><input name='Books.Index' type='hidden' value='" + index + "' /></td>";
        var titleCell = "<td><input style='width: 100%; max-width:1000px;' id='Books_" + index + "__Title' name='Modalities[" + index + "].Name' type='text' value='' /></td>";
        var removeCell = "<td style='width:200px;'><input id='btnAddBook' type='button'  value='Remove' onclick='removeRow(" + index + ");' /></td>";

        var moveUpCell = "<td style='width:50px;'><input type='button' value='&#8679;' onClick='MoveUp.call(this);'/></td>";
        var moveDownCell = "<td style='width:50px;'><input type='button' value='&#8681;' onClick='MoveDown.call(this);'/></td>";

       // var comboForm = "<td><select id='SelectedForm' name='Modalities[" + index + "].FormID'>' +@Html.Raw(Json.Encode(ViewData["Forms"])) + '</select></td>';
      //  var comboForm = '<td>' +@Html.Raw(Json.Encode(ViewData["Forms"])) +'</td>';
        var comboForm = '';



        var newRow = "<tr id='trBook" + index + "'>" +
        indexCell + titleCell + removeCell +comboForm + moveUpCell + moveDownCell +
           "</tr>";
        $("#tbBooks").append(newRow);
    }

    function removeRow(id) {
        var controlToBeRemoved = "#trBook" + id;
        $(controlToBeRemoved).remove();
    }

    function get_previoussibling(n) {
        x = n.previousSibling;
        while (x.nodeType != 1) {
            x = x.previousSibling;
        }
        return x;
    }

    function get_nextsibling(n) {
        x = n.nextSibling;
        while (x != null && x.nodeType != 1) {
            x = x.nextSibling;
        }
        return x;
    }

    function MoveUp() {
        var table,
            row = this.parentNode;

        while (row != null) {
            if (row.nodeName == 'TR') {
                break;
            }
            row = row.parentNode;
        }
        table = row.parentNode;
        table.insertBefore(row, get_previoussibling(row));
    }

    function MoveDown() {
        var table,
            row = this.parentNode;

        while (row != null) {
            if (row.nodeName == 'TR') {
                break;
            }
            row = row.parentNode;
        }
        table = row.parentNode;
        table.insertBefore(row, get_nextsibling(get_nextsibling(row)));
    }
</script>

<h2>Create Event</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Venue, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Venue, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Venue, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartDT, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartDT, new { htmlAttributes = new { @class = "form-control", Type = "date" } })
                @Html.ValidationMessageFor(model => model.StartDT, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndDT, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EndDT, new { htmlAttributes = new { @class = "form-control", Type = "date" } })
                @Html.ValidationMessageFor(model => model.EndDT, "", new { @class = "text-danger" })
            </div>
        </div>

        <h4>Modalities</h4> <h6>Please note: The following are default modalities. All modalities are maintainable after saved the new event.</h6>
        @if (Model != null && Model.Modalities !=null)
        {
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th></th>
                            <th>
                                Modality Name
                            </th>
                            <th>
                                Icon
                            </th>
                            <th>
                                Is Mandatory
                            </th>
                            <th>
                                Form Linked
                            </th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Modalities)
                        {
                            <tr>
                                <td class="vcenter">
                                </td>
                                <td>
                                    @item.Name
                                </td>
                                <td>
                                    <img src="@Url.Content(item.IconPath)" style="height:25px;width:25px;" alt="Image" />
                                </td>
                                <td>
                                    <span class="glyphicon glyphicon-ok-sign" style="color:green"></span>
                                </td>
                                <td>
                                    <span class="glyphicon glyphicon-minus-sign" style="color:grey"></span>
                                </td>
                                <td>
                                </td>
                                <td>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }


        <div class="form-group">

            <div class="col-md-offset-2 col-md-10">
                <button type="submit" class="btn btn-primary">Create</button>
                @Html.ActionLink("Back", "Index", "Event", null, new { @class = "btn btn-common" })
            </div>
        </div>
    </div>
}



