@model PHS.Business.ViewModel.FormImport.FormImportViewModel

@using PHS.DB

@{
    ViewBag.Title = "Form Import";
}

@section headerScripts{
    <script type="text/javascript" src="@Url.Content("~/scripts/jquery.filedrop.js")"></script>

}

<style type="text/css">
    #dropZone {
        background: gray;
        border: black dashed 3px;
        width: 200px;
        padding: 50px;
        text-align: center;
        color: white;
    }
</style>


<h2>Import Data</h2>


@Html.DropDownList("FormID", new SelectList(Model.Forms, "FormID", "Title", string.Empty))

<button type="button" id="btnTemplate">Download Form Template</button>
<br />

<div>
    <!--
    <input type="file" id="FileUpload1" />
    <input type="button" id="btnUpload" value="Upload Files" />
     -->
</div>

<br />
    <div id="dropZone">Drop your files here</div>
<br />

Uploaded Files:
<ul id="uploadResult"></ul>

<script type="text/javascript">

    $(document).ready(function () {
        templateClickFunction();
        draganddrop();
        //uploadClick();
    });

    function uploadClick() {
        $('#btnUpload').click(function () {  
  
            // Checking whether FormData is available in browser  
            if (window.FormData !== undefined) {  
  
                var fileUpload = $("#FileUpload1").get(0);  
                var files = fileUpload.files;  
              
                // Create FormData object  
                var fileData = new FormData();  
  
                // Looping over all files and add it to FormData object  
                for (var i = 0; i < files.length; i++) {  
                    fileData.append(files[i].name, files[i]);  
                }  
  
                $.ajax({  
                    url: '@Url.Action("UploadSelectedFile")',  
                    type: "POST",  
                    contentType: false, // Not to set any content header  
                    processData: false, // Not to process data  
                    data: fileData,  
                    success: function (result) {  
                        alert(result);  
                    },  
                    error: function (err) {  
                        alert(err.statusText);  
                    }  
                });  
            } else {  
                alert("FormData is not supported.");  
            }  
        });


    }

    function templateClickFunction() {
        $("#btnTemplate").click(function () {

            var formId = $("select[name=FormID] option:selected").val();

            var jsonObject = {
                "formId": formId
            };

            $.ajax({
                url: "@Url.Action("GenerateFormTemplate")",
                type: "POST",
                data: JSON.stringify(jsonObject),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                error: function (response) {


                },
                success: function (response) {
                    window.location = '/phs/formimport/DownloadFormTemplate?fileGuid=' + response.FileGuid
                  + '&filename=' + response.FileName;
                }
            });

        });
    }

    function draganddrop() {

        $('#dropZone').filedrop({

            url: '@Url.Action("UploadFiles")',
            paramname: 'files',
            maxFiles: 1,
            dataType: "json",
            data: {
                formId: function () {
                    return $("select[name=FormID] option:selected").val();
                },
            },
            error: function (err, file) {
                switch (err) {
                    case 'BrowserNotSupported':
                        alert('browser does not support HTML5 drag and drop')
                        break;
                    case 'TooManyFiles':
                        // user uploaded more than 'maxfiles'
                        break;
                    case 'FileTooLarge':
                        // program encountered a file whose size is greater than 'maxfilesize'
                        // FileTooLarge also has access to the file which was too large
                        // use file.name to reference the filename of the culprit file
                        break;
                    case 'FileTypeNotAllowed':
                        // The file type is not in the specified list 'allowedfiletypes'
                        break;
                    case 'FileExtensionNotAllowed':
                        // The file extension is not in the specified list 'allowedfileextensions'
                        break;
                    default:
                        break;
                }
            },
            error: function (response) {
                $('#uploadResult').append('<li>' + response + '</li>');

            },
            success: function (response) {
                $('#uploadResult').append('<li>' + response + '</li>');
            },
            dragOver: function () {
                $('#dropZone').css('background', 'blue');
            },
            dragLeave: function () {
                $('#dropZone').css('background', 'gray');
            },
            drop: function () {
                $('#dropZone').css('background', 'gray');
            },
            afterAll: function () {
                $('#dropZone').html('The file(s) have been uploaded successfully!');
            },
            uploadFinished: function (i, file, response, time) {
                // $('#uploadResult').append('<li>' + file.name + '</li>');
            }
        });
    }
</script>