@model PHS.DB.ViewModels.Form.FormViewModel

@using PHS.Business.Extensions
@using PHS.Common

@{
    ViewBag.Title = "Create Form";
}

<h2>Create Form</h2>

<script src="/Scripts/jquery.validate.js"></script>
<script src="/Scripts/jquery.validate.unobtrusive.js"></script>

<script src="/Scripts/expressive.annotations.validate.min.js"></script>

<script type="text/javascript">

    $(document).ready(function () {

        if ($("#IsPublic").val() == 'true') {
            $("#PublicFormType").show();
            $("#Slug").show();
            $("#InternalFormType").hide();
        } else {
            $("#PublicFormType").hide();
            $("#Slug").hide();
            $("#InternalFormType").show();
        }

        $("#IsPublic").on("change", function () {

            if ($(this).val() == 'true') {
                $("#PublicFormType").show();
                $("#Slug").show();
                $("#InternalFormType").hide();
            } else {
                $("#PublicFormType").hide();
                $("#Slug").hide();
                $("#InternalFormType").show();
            }

        });
    });

</script>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()

    @Html.WriteMessages()

    <div class="form-horizontal">
        <h4>Create</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
       
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsPublic, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{

                    var listItems = new List<SelectListItem>()
                        {
                            new SelectListItem {Text = "True", Value = "true"},
                            new SelectListItem {Text = "False", Value = "false"}
                        };

                    @Html.DropDownListFor(m => m.IsPublic, listItems, string.Empty)
                    @Html.ValidationMessageFor(model => model.IsPublic, "", new { @class = "text-danger" })
                }
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.InternalFormType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{

                    var internallistItems1 = new List<SelectListItem>()
                        {
                            new SelectListItem {Text = "REGISTRATION", Value = Constants.Internal_Form_Type_Registration},
                            new SelectListItem {Text = "MEGA SORTING STATION", Value = Constants.Internal_Form_Type_MegaSortingStation},
                            new SelectListItem {Text = "EVENT SUMMARY", Value = Constants.Internal_Form_Type_EventSummary}
                        };

                    @Html.DropDownListFor(m => m.InternalFormType, internallistItems1, string.Empty)
                    @Html.ValidationMessageFor(model => model.InternalFormType, "", new { @class = "text-danger" })
                }
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Slug, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Slug, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Slug, "", new { @class = "text-danger" })
            </div>
        </div>

        

        <div class="form-group">
            @Html.LabelFor(model => model.PublicFormType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{

                    var listItems1 = new List<SelectListItem>()
                        {
                            new SelectListItem {Text = "Pre Registration", Value = Constants.Public_Form_Type_PreRegistration},
                            new SelectListItem {Text = "Out Reach", Value = Constants.Public_Form_Type_OutReach}
                        };

                    @Html.DropDownListFor(m => m.PublicFormType, listItems1, string.Empty)
                    @Html.ValidationMessageFor(model => model.PublicFormType, "", new { @class = "text-danger" })
                }
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
